#! /usr/bin/env python
#*
#*  Copyright (c) 2010, Sebastian Blumenthal
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the author nor the names of other
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# IAVLegTrack parameters

import roslib
roslib.load_manifest('iav_legtrack')

from dynamic_reconfigure.parameter_generator import *
#from driver_base.msg import SensorLevels

# Dependency Hack
class SensorLevels():
	RECONFIGURE_CLOSE = 3
	RECONFIGURE_STOP = 1
	RECONFIGURE_RUNNING = 0

gen = ParameterGenerator()

#       Name, Type, Reconfiguration level, Description, Default, Min, Max
gen.add("max_laser_range",       double_t,  SensorLevels.RECONFIGURE_RUNNING, "Maximum laser range", 8, 0, 30)

gen.add("arc_min_aperture",      double_t,  SensorLevels.RECONFIGURE_RUNNING, "Minimum angle of inscribed angles of a potential arc in RAD", 2, 0, 10)
gen.add("arc_max_aperture",      double_t,  SensorLevels.RECONFIGURE_RUNNING, "Maximum angle of inscribed angles of a potential arc in RADin RAD", 3, 0, 10)
gen.add("arc_std_max",      double_t,  SensorLevels.RECONFIGURE_RUNNING, "Maximum allowed standard deviation od inscribed angles", 0.25, 0, 1)

gen.add("segmentation_threshold",      double_t,  SensorLevels.RECONFIGURE_RUNNING, "Distance threshold for (jump edge) detection for segments.", 0.200, 0, 10)

gen.add("line_min_distance",      double_t,  SensorLevels.RECONFIGURE_RUNNING, "Minimum length of a line", 0.120, 0, 10)
gen.add("line_error_threshold",      double_t,  SensorLevels.RECONFIGURE_RUNNING, "Maximum allowed error during recursive line fitting.", 0.020, 0, 10)

gen.add("max_leg_diameter",      double_t,  SensorLevels.RECONFIGURE_RUNNING, "Maximum diameter of a leg", 0.020, 0, 10)
gen.add("min_leg_diameter",      double_t,  SensorLevels.RECONFIGURE_RUNNING, "Minimum diameter of a leg", 0.040, 0, 10)

gen.add("do_circles", bool_t, SensorLevels.RECONFIGURE_RUNNING, "", True)
gen.add("do_lines", bool_t, SensorLevels.RECONFIGURE_RUNNING, "", True)
gen.add("do_legs", bool_t, SensorLevels.RECONFIGURE_RUNNING, "", True)
gen.add("iav_do_lines", bool_t, SensorLevels.RECONFIGURE_RUNNING, "", True)
gen.add("safe_circle_corners", bool_t, SensorLevels.RECONFIGURE_RUNNING, "", False)


exit(gen.generate('iav_legtrack', "iav_legtrack", "IAVLegTrack"))