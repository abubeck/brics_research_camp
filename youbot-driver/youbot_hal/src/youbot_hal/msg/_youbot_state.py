"""autogenerated by genmsg_py from youbot_state.msg. Do not edit."""
import roslib.message
import struct


class youbot_state(roslib.message.Message):
  _md5sum = "685ea1840c2c9539664c40be5d6cb59b"
  _type = "youbot_hal/youbot_state"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 pos_x
float64 pos_y
float64 pos_theta
float64 vel_theta
float64 vel_x
float64 vel_y
float64 angle_joint1
float64 angle_joint2
float64 angle_joint3
float64 angle_joint4
float64 angle_joint5
float64 vel_joint1
float64 vel_joint2
float64 vel_joint3
float64 vel_joint4
float64 vel_joint5
int16 gripper

"""
  __slots__ = ['pos_x','pos_y','pos_theta','vel_theta','vel_x','vel_y','angle_joint1','angle_joint2','angle_joint3','angle_joint4','angle_joint5','vel_joint1','vel_joint2','vel_joint3','vel_joint4','vel_joint5','gripper']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       pos_x,pos_y,pos_theta,vel_theta,vel_x,vel_y,angle_joint1,angle_joint2,angle_joint3,angle_joint4,angle_joint5,vel_joint1,vel_joint2,vel_joint3,vel_joint4,vel_joint5,gripper
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(youbot_state, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pos_x is None:
        self.pos_x = 0.
      if self.pos_y is None:
        self.pos_y = 0.
      if self.pos_theta is None:
        self.pos_theta = 0.
      if self.vel_theta is None:
        self.vel_theta = 0.
      if self.vel_x is None:
        self.vel_x = 0.
      if self.vel_y is None:
        self.vel_y = 0.
      if self.angle_joint1 is None:
        self.angle_joint1 = 0.
      if self.angle_joint2 is None:
        self.angle_joint2 = 0.
      if self.angle_joint3 is None:
        self.angle_joint3 = 0.
      if self.angle_joint4 is None:
        self.angle_joint4 = 0.
      if self.angle_joint5 is None:
        self.angle_joint5 = 0.
      if self.vel_joint1 is None:
        self.vel_joint1 = 0.
      if self.vel_joint2 is None:
        self.vel_joint2 = 0.
      if self.vel_joint3 is None:
        self.vel_joint3 = 0.
      if self.vel_joint4 is None:
        self.vel_joint4 = 0.
      if self.vel_joint5 is None:
        self.vel_joint5 = 0.
      if self.gripper is None:
        self.gripper = 0
    else:
      self.pos_x = 0.
      self.pos_y = 0.
      self.pos_theta = 0.
      self.vel_theta = 0.
      self.vel_x = 0.
      self.vel_y = 0.
      self.angle_joint1 = 0.
      self.angle_joint2 = 0.
      self.angle_joint3 = 0.
      self.angle_joint4 = 0.
      self.angle_joint5 = 0.
      self.vel_joint1 = 0.
      self.vel_joint2 = 0.
      self.vel_joint3 = 0.
      self.vel_joint4 = 0.
      self.vel_joint5 = 0.
      self.gripper = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_16dh.pack(_x.pos_x, _x.pos_y, _x.pos_theta, _x.vel_theta, _x.vel_x, _x.vel_y, _x.angle_joint1, _x.angle_joint2, _x.angle_joint3, _x.angle_joint4, _x.angle_joint5, _x.vel_joint1, _x.vel_joint2, _x.vel_joint3, _x.vel_joint4, _x.vel_joint5, _x.gripper))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 130
      (_x.pos_x, _x.pos_y, _x.pos_theta, _x.vel_theta, _x.vel_x, _x.vel_y, _x.angle_joint1, _x.angle_joint2, _x.angle_joint3, _x.angle_joint4, _x.angle_joint5, _x.vel_joint1, _x.vel_joint2, _x.vel_joint3, _x.vel_joint4, _x.vel_joint5, _x.gripper,) = _struct_16dh.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_16dh.pack(_x.pos_x, _x.pos_y, _x.pos_theta, _x.vel_theta, _x.vel_x, _x.vel_y, _x.angle_joint1, _x.angle_joint2, _x.angle_joint3, _x.angle_joint4, _x.angle_joint5, _x.vel_joint1, _x.vel_joint2, _x.vel_joint3, _x.vel_joint4, _x.vel_joint5, _x.gripper))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 130
      (_x.pos_x, _x.pos_y, _x.pos_theta, _x.vel_theta, _x.vel_x, _x.vel_y, _x.angle_joint1, _x.angle_joint2, _x.angle_joint3, _x.angle_joint4, _x.angle_joint5, _x.vel_joint1, _x.vel_joint2, _x.vel_joint3, _x.vel_joint4, _x.vel_joint5, _x.gripper,) = _struct_16dh.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_16dh = struct.Struct("<16dh")
